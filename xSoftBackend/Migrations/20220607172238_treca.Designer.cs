// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using xSoftBackend.Data;

namespace xSoftBackend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220607172238_treca")]
    partial class treca
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("xSoftBackend.Models.Grad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostanskiBroj")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Grad");
                });

            modelBuilder.Entity("xSoftBackend.Models.KategorijaKnjige", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Ime")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("KategorijaKnjige");
                });

            modelBuilder.Entity("xSoftBackend.Models.Knjiga", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DatumObjave")
                        .HasColumnType("datetime2");

                    b.Property<string>("DetaljanOpis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Kategorija_Knjige_id")
                        .HasColumnType("int");

                    b.Property<string>("NazivKnjige")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SlikaKnjige")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Kategorija_Knjige_id");

                    b.ToTable("Knjiga");
                });

            modelBuilder.Entity("xSoftBackend.Models.Komentar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DatumVrijeme")
                        .HasColumnType("datetime2");

                    b.Property<int>("Knjiga_id")
                        .HasColumnType("int");

                    b.Property<string>("SadrzajKomentara")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("korisnik_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Knjiga_id");

                    b.HasIndex("korisnik_id");

                    b.ToTable("Komentar");
                });

            modelBuilder.Entity("xSoftBackend.Models.KorisnickiNalog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("KorisnickoIme")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lozinka")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("KorisnickiNalog");
                });

            modelBuilder.Entity("xSoftBackend.Models.Spol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Ime")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Spol");
                });

            modelBuilder.Entity("xSoftBackend.ModelsAutentififkacija.AutentifikacijaToken", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ipAdresa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("korisnickiNalogId")
                        .HasColumnType("int");

                    b.Property<string>("vrijednost")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("vrijemeEvideniranja")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("korisnickiNalogId");

                    b.ToTable("AutentifikacijaToken");
                });

            modelBuilder.Entity("xSoftBackend.Models.Korisnik", b =>
                {
                    b.HasBaseType("xSoftBackend.Models.KorisnickiNalog");

                    b.Property<string>("Adresa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DatumRodjenja")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Grad_id")
                        .HasColumnType("int");

                    b.Property<string>("Ime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Spol_id")
                        .HasColumnType("int");

                    b.HasIndex("Grad_id");

                    b.HasIndex("Spol_id");

                    b.ToTable("Korisnik");
                });

            modelBuilder.Entity("xSoftBackend.Models.Knjiga", b =>
                {
                    b.HasOne("xSoftBackend.Models.KategorijaKnjige", "kategorijaknjige")
                        .WithMany()
                        .HasForeignKey("Kategorija_Knjige_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("kategorijaknjige");
                });

            modelBuilder.Entity("xSoftBackend.Models.Komentar", b =>
                {
                    b.HasOne("xSoftBackend.Models.Knjiga", "knjiga")
                        .WithMany()
                        .HasForeignKey("Knjiga_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("xSoftBackend.Models.Korisnik", "korisnik")
                        .WithMany()
                        .HasForeignKey("korisnik_id");

                    b.Navigation("knjiga");

                    b.Navigation("korisnik");
                });

            modelBuilder.Entity("xSoftBackend.ModelsAutentififkacija.AutentifikacijaToken", b =>
                {
                    b.HasOne("xSoftBackend.Models.KorisnickiNalog", "korisnickiNalog")
                        .WithMany()
                        .HasForeignKey("korisnickiNalogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("korisnickiNalog");
                });

            modelBuilder.Entity("xSoftBackend.Models.Korisnik", b =>
                {
                    b.HasOne("xSoftBackend.Models.Grad", "grad")
                        .WithMany()
                        .HasForeignKey("Grad_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("xSoftBackend.Models.KorisnickiNalog", null)
                        .WithOne()
                        .HasForeignKey("xSoftBackend.Models.Korisnik", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("xSoftBackend.Models.Spol", "spol")
                        .WithMany()
                        .HasForeignKey("Spol_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("grad");

                    b.Navigation("spol");
                });
#pragma warning restore 612, 618
        }
    }
}
